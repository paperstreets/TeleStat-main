import { Component, OnInit } from '@angular/core';
import * as L from 'leaflet';
import 'leaflet-draw';



@Component({
  selector: 'app-map',
  templateUrl: './map.page.html',
  styleUrls: ['./map.page.scss'],
})
export class MapPage implements OnInit{
  private mymap: L.Map | null;
  private carIcons: any[] = []; // Array of car icons
  private carMarkers: any[] = []; // Array of car markers
  private routeCoordinates: any[][] = [];
  private zones: L.Layer[] = []; // Array of draw zones
  private carZoneEntryTime: { [carIndex: number]: number | undefined } = {};

  private animationStarted: boolean[] = [false, false, false, false, false]; // To prevent multiple animations for each car

  constructor() {
    this.routeCoordinates[0] = [
      [50.4501, 30.5234], // Kyiv
      // ... other intermediate coordinates along the M05
      [50.329378, 30.400118], [50.260871, 30.334178], [50.207286, 30.241481], [50.154999, 30.228916],
      [46.482526, 30.7233095] // Odessa
    ];
    this.routeCoordinates[1] = [
      [50.4501, 30.5234], // Kyiv Vasilkiv
      [50.386474, 30.449498], [50.385902, 30.448169], [50.382517, 30.443007], [50.382386, 30.442329],
      [50.383997, 30.440126], [50.387946, 30.434784], [50.389595, 30.432631], [50.394072, 30.426537], [50.396340, 30.423134], 
      [50.397662, 30.422732], [50.398391, 30.421123], [50.397602, 30.417426], [50.395995, 30.413575],
      [50.394112, 30.409909], [50.389252, 30.394375], [50.372260, 30.371576],
      [50.368796, 30.365307], [50.369586, 30.359801], [50.365242, 30.355356],
      [50.356257, 30.339159], [50.349217, 30.330357], [50.344417, 30.324400],
      [50.344169, 30.324365], [50.344192, 30.327091], [50.344476, 30.331102],
      [50.343737, 30.338616], [50.342638, 30.348529], [50.342166, 30.352599],
      [50.340808, 30.357317], [550.338072, 30.359537], [50.333821, 30.367802],
      [50.329608, 30.374092], [50.320146, 30.380043], [50.319701, 30.380796],
      [50.318401, 30.379446], [50.318364, 30.379830], [50.318895, 30.381172],
      [50.319572, 30.381815], [50.318781, 30.382614], [50.317798, 30.383751],
      [50.317798, 30.383751], [50.316027, 30.385508], [50.315802, 30.385819],
      [50.313037, 30.383688], [50.308761, 30.380199], [50.305208, 30.376206],
      [50.299631, 30.367479], [50.293476, 30.357855], [50.290919, 30.354114],
      [50.285324, 30.348954], [50.281889, 30.346092], [50.270429, 30.339542],
      [50.265816, 30.336848], [50.264870, 30.335093], [50.264123, 30.334861],
      [50.262984, 30.335256], [50.261511, 30.334568], [50.255473, 30.331242],
      [50.246315, 30.326101], [50.239838, 30.322529], [50.233142, 30.321544],
      [50.227125, 30.321570], [50.220676, 30.319976], [50.214828, 30.319252],
      [50.213679, 30.318847], [50.211388, 30.317520], [50.203093, 30.314416],
      [50.195269, 30.311552], [50.192513, 30.311172], [50.186106, 30.311428],
      [550.182264, 30.311888], [50.182282, 30.311419], [50.182436, 30.310627],

      // Zhuliani - Vasik
    ];
    this.routeCoordinates[2] = [
      // Odessa
 [46.339549, 30.670151], [46.339414, 30.670355], [46.338917, 30.669810], [46.337556, 30.668725],
 [46.337539, 30.668554], [46.339017, 30.667686], [46.341254, 30.667102], [46.342989, 30.666838],
 [46.346175, 30.666285], [46.350148, 30.665621], [46.353599, 30.664964], [46.357144, 30.664360],
 [46.359730, 30.663748], [46.360147, 30.663577], [46.360546, 30.664054], [46.363885, 30.663443],
 [46.369652, 30.662335], [46.374272, 30.661516], [46.380038, 30.660456], [46.384574, 30.659638],
 [46.386933, 30.659252], [46.387411, 30.659239], [46.388366, 30.659371], [46.388706, 30.659009],
 [46.389853, 30.658494], [46.389940, 30.657520], [46.390237, 30.656950], [46.389508, 30.652428],
 [46.388798, 30.647892], [46.388231, 30.644233], [46.389810, 30.643064], [46.392623, 30.639920],
 [46.393974, 30.638494], [46.395928, 30.637057], [46.398384, 30.635463], [46.401478, 30.633132],
 [46.405114, 30.632099], [46.411533, 30.630762], [46.416955, 30.629615], 
 [46.421608, 30.628634], [46.427985, 30.627214], [46.431782, 30.626435], 
 [46.433751, 30.626075], [46.434434, 30.626604], [46.435000, 30.626060],
 [46.437292, 30.625265], [46.440930, 30.624525], [46.441787, 30.624750],
 [46.442481, 30.624739], [46.442782, 30.624212], [46.443583, 30.623781],
 [46.450040, 30.622410], [46.455125, 30.621380], [46.459235, 30.620543],
 [46.463699, 30.619653], [46.466838, 30.618854], [46.469215, 30.618401],
 [46.474882, 30.617309], [46.478613, 30.616494], [46.483806, 30.615453],
 [46.485978, 30.615045], [46.486343, 30.615231], [46.486723, 30.615114],
 [46.487289, 30.614825], [46.489337, 30.614514], [46.492340, 30.613945],
 [46.497495, 30.612830], [46.501153, 30.612051], [46.507527, 30.610766],
 [46.510160, 30.610360], [46.512464, 30.611082], [46.514450, 30.612679],
 [46.516431, 30.615656], [46.517828, 30.617893], [46.518964, 30.619725],
 [46.518984, 30.621031], [46.518477, 30.621721], [46.517901, 30.621775],
 [46.517326, 30.621039], [46.517449, 30.619692], [46.518109, 30.618812],
 [46.520116, 30.616892], [46.523992, 30.613103], [46.528288, 30.608919],
 [46.532879, 30.605035], [46.537366, 30.601248], [46.544004, 30.595698],
 [46.551625, 30.589466], [46.563986, 30.580734], [46.581905, 30.570811],
 [46.594105, 30.564044], [46.610472, 30.555122], [46.622686, 30.551448],
 [46.626319, 30.548605], [46.636470, 30.540725], [46.642223, 30.536991],
  [46.648684, 30.532425], [46.650882, 30.529108], [46.654342, 30.520674],
  [46.660121, 30.511654], [46.665962, 30.503373], [46.671840, 30.497254],
  [46.680871, 30.490063], [46.688086, 30.484282], [46.694956, 30.478877],
  [46.704776, 30.471086], [46.714791, 30.463170], [46.722043, 30.457442],
  [46.734586, 30.447396], [46.743643, 30.440174], [46.753007, 30.433214],
  [46.763879, 30.428314], [46.768233, 30.426567], [46.774185, 30.424241],
  [46.784032, 30.420238], [46.789724, 30.417980], [46.794776, 30.415938],
  [46.800798, 30.413497], [46.812125, 30.408903], [46.822298, 30.404849],
  [46.830490, 30.401492], [46.836901, 30.398962], [46.841497, 30.397168],
  [46.849191, 30.393979], [46.854315, 30.391851], [46.854787, 30.391460],
  [46.854589, 30.391478], [46.851485, 30.392813], [46.848151, 30.394239],
  [46.844638, 30.395626], [46.842293, 30.396563], [46.835935, 30.399164],
  [46.831595, 30.400888], [46.820128, 30.405496], [46.814639, 30.407699],
  [46.798630, 30.414166], [46.797561, 30.413873], [46.794946, 30.412142],
  [46.794142, 30.409841], [46.792767, 30.401222], [46.791372, 30.392531],
 [46.789635, 30.380933],
 [46.788924, 30.373877],
    ];
    this.routeCoordinates[3] = [
      [49.305622, 26.945045], [49.305489, 26.944927], [49.306563, 26.942234], [49.307913, 26.939085],// Hmelnitsky
[49.308700, 26.937288], [49.311423, 26.939804], [49.315178, 26.943321], [49.317796, 26.946340],
[49.320988, 26.950089], [49.323936, 26.953320], [49.329622, 26.956704], [49.332123, 26.955930],
[49.334198, 26.955442], [49.340150, 26.957637], [49.344857, 26.959265], [49.351015, 26.961486],
[49.354918, 26.962616], [49.357463, 26.963086], [49.359541, 26.962771], [49.360364, 26.962807],
[49.360791, 26.963475], [49.361303, 26.963388], [49.361555, 26.962727], [49.361348, 26.961757],
[49.360930, 26.960938], [49.360862, 26.959075], [49.360718, 26.954516], [49.360701, 26.953379],
    ];
    this.routeCoordinates[4] = [
      [49.784496, 30.124927], [49.783859, 30.126475], [49.783431, 30.128303], [49.783275, 30.130992], // bila tserkva
[49.783129, 30.134634], [49.783092, 30.139144], [49.783231, 30.141902], [49.784076, 30.145094],
[49.785398, 30.149737], [49.785590, 30.151447], [49.785208, 30.156412], [49.784820, 30.161534],
[49.784610, 30.166459], [49.784367, 30.173030], [49.784128, 30.180239], [49.783877, 30.185533],
[49.783725, 30.189559], [49.783453, 30.190848], [49.783391, 30.191753], [49.782983, 30.193980],
[49.782703, 30.198273], [49.782592, 30.203102], [49.783000, 30.206541], [49.783385, 30.209125],
[49.783241, 30.215147], [49.782705, 30.230348], [49.782487, 30.237344], [49.782120, 30.247368],
[49.781725, 30.260794], [49.781427, 30.271351], [49.781157, 30.280262], [49.781015, 30.285761],
[49.780720, 30.294623],
    ];
    // Initialize car icons and markers
    for (let i = 0; i < 5; i++) {
      this.carIcons[i] = L.icon({
        iconUrl: `assets/icon/car1.png`, // Ensure you have car0.png, car1.png, etc.
        iconSize: [32, 32]
      });
    }
    this.mymap = null;
  }

  startAnimation(carIndex: number) {
    if (!this.animationStarted[carIndex]) {
      this.animationStarted[carIndex] = true;
      this.animateCar(carIndex, 0);
    }
  }

  ngOnInit() {
  }

  ionViewDidEnter() {
    setTimeout(() => this.initMap(), 300);
  }

  
initMap() {
  this.mymap = L.map('mapid', {
    center: [50.4501, 30.5234],
    zoom: 6,
    
    maxBounds: [
      [44.3866, 22.1372],
      [52.3795, 40.2286]
    ]
  });

  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: 'Â© OpenStreetMap contributors'
  }).addTo(this.mymap);

  // Initialize and add car markers
  for (let i = 0; i < 5; i++) {
    if (this.routeCoordinates[i] && this.routeCoordinates[i][0]) {
      this.carMarkers[i] = L.marker(this.routeCoordinates[i][0], {icon: this.carIcons[i]}).addTo(this.mymap);
    }
  }
  
  const drawControl = new L.Control.Draw({
    draw: {
      polyline: false,
      circle: false,
      circlemarker: false,
      marker: false,
      rectangle: false,
      polygon: {
        shapeOptions: {
          color: 'red'
        }
      }
    }
  });
  this.mymap.addControl(drawControl);

  this.mymap.on(L.Draw.Event.CREATED, (e: any) => {
    const layer = e.layer;
    this.zones.push(layer);
    if (this.mymap) {
      this.mymap.addLayer(layer);
    }
  });
}

showAlert(message: string) {
  const alertBox = document.getElementById('alertBox');
  if (alertBox) {
    alertBox.textContent = message;
    alertBox.classList.add('show');

    setTimeout(() => {
      alertBox.classList.remove('show');
    }, 5000);
  }
}


animateCar(carIndex: number, routeIndex: number) {
  if (routeIndex < this.routeCoordinates[carIndex].length) {
    let nextCoord = this.routeCoordinates[carIndex][routeIndex];
    if (nextCoord) {
      this.carMarkers[carIndex].setLatLng(nextCoord);
      
   // ÐÐµÑÐµÐ²ÑÑÐºÐ° Ð½Ð° Ð¿ÐµÑÐµÑÐ¸Ð½ Ð· ÐºÐ¾Ð¶Ð½Ð¾Ñ Ð·Ð¾Ð½Ð¾Ñ
   this.zones.forEach(zone => {
    if ('getBounds' in zone) {
      const bounds = (zone as L.Polygon | L.Rectangle).getBounds();
      if (bounds.contains(nextCoord)) {
        if (this.carZoneEntryTime[carIndex] === undefined) { // Ð¯ÐºÑÐ¾ Ð°Ð²ÑÐ¾ ÑÑÐ»ÑÐºÐ¸ ÑÐ¾ ÑÐ²ÑÐ¹ÑÐ»Ð¾ Ð² Ð·Ð¾Ð½Ñ
          this.carZoneEntryTime[carIndex] = Date.now();
          this.showAlert(`ÐÐ²ÑÐ¾ ${carIndex} ÑÐ²ÑÐ¹ÑÐ»Ð¾ Ð² Ð·Ð¾Ð½Ñ!`);
        }
      } else {
        if (this.carZoneEntryTime[carIndex] !== undefined) { // Ð¯ÐºÑÐ¾ Ð°Ð²ÑÐ¾ Ð·Ð°ÑÐ°Ð· Ð¿Ð¾ÐºÐ¸Ð´Ð°Ñ Ð·Ð¾Ð½Ñ
          const entryTime = this.carZoneEntryTime[carIndex];
          if (entryTime !== undefined) { // ÐÐ¾Ð´Ð°ÑÐºÐ¾Ð²Ð° Ð¿ÐµÑÐµÐ²ÑÑÐºÐ° Ð¿ÐµÑÐµÐ´ Ð¾Ð±ÑÐ¸ÑÐ»ÐµÐ½Ð½ÑÐ¼
            const timeInZone = Date.now() - entryTime;
            this.showAlert(`ÐÐ²ÑÐ¾ ${carIndex} Ð¿ÑÐ¾Ð²ÐµÐ»Ð¾ Ð² Ð·Ð¾Ð½Ñ ${timeInZone / 1000} ÑÐ²Ð¸Ð»Ð¸Ð½`);
            this.carZoneEntryTime[carIndex] = undefined;
          }
        }
      }
    }
  })

      routeIndex++;
      setTimeout(() => {
        this.animateCar(carIndex, routeIndex);
      }, 1000 + 200 * carIndex);
    }
  }
}
}
